# Requires the Docker Compose V2.
# See https://docs.docker.com/compose/compose-file/compose-file-v3
# and https://github.com/compose-spec/compose-spec/blob/master/spec.md
# for details concerning the `docker-compose.yaml` file syntax.

# Variables are in ${VARIABLE:-DEFAULT_VALUE} format
# to ensure that default values are given to the Dockerfile.
# Using a `.env` file to set variables is strongly recommended.

# Run `make env` to create a basic `.env` file with the UID and GID variables.
# Compute Capability must be specified via the `CCA` variable.

# Using a `docker-compose.yaml` file has many advantages
# over creating custom shell scripts for each project.
# The settings are much easier to see and maintain than scattered shell scripts.
# Also, Compose is a native Docker component, simplifying project maintenance.

# Set the host environment variable `BUILDKIT_PROGRESS=plain` to see the full build log.
# https://github.com/docker/cli/blob/master/docs/reference/commandline/cli.md#environment-variables

# See https://pytorch.org/docs/stable/cpp_extension.html for an
# explanation of how to specify the `TORCH_CUDA_ARCH_LIST` variable.
# The variable `CCA` is used to specify `TORCH_CUDA_ARCH_LIST`.

networks: # Use the host network instead of creating a separate network.
  default: # This reduces load and conflicts with the host network.
    name: host # This may cause security issues in production, however.
    external: true

services:
  base: # Base service containing configurations common to all services.
    tty: true # Equivalent to `-t` flag in `docker run`.
    init: true # Equivalent to `--init` flag in `docker run`.
    stdin_open: true # equivalent to `-i` flag in `docker run`.
    working_dir: ${PROJECT_ROOT:-/opt/project}
    # Use different image names for different users and projects.
    # Otherwise, images will be repeatedly removed and recreated.
    # The removed images will remain cached, however.
    image: ${IMAGE_NAME}
    network_mode: host # Use the same network as the host, may cause security issues.
    # `ipc: host` removes the shared memory cap but is a known security vulnerability.
    # ipc: host  # Equivalent to `--ipc=host` in `docker run`. Disable this on WSL.
    # shm_size: 1GB  # Explicit shared memory limit. No security issues this way.
    environment: # Common runtime environment variables.
      CUDA_DEVICE_ORDER: PCI_BUS_ID
      TZ: ${TZ:-Asia/Seoul} # Timezone settings used during runtime.
    build:
      context: . # Nearly all files are ignored due to `.dockerignore` settings.
      args: # Common build-time environment variables.
        # Even if these variables are unnecessary during the build,
        # they can be ignored simply by not defining them in that stage.
        PROJECT_ROOT: ${PROJECT_ROOT:-/opt/project}
        GID: ${GID:-1000}
        UID: ${UID:-1000}
        GRP: ${GRP:-user}
        USR: ${USR:-user}
        # `TZ` is placed here even if not used for consistency with the runtime.
        TZ: ${TZ:-Asia/Seoul}
    deploy: # API dependent on compose version.
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]
      #        device_ids: [ "0" ]  # Use only GPU 0.

  train: # Default service name. Change the name for each project.
    extends:
      service: base
    # Set to the service name. Makes terminals easier to tell apart.
    hostname: ${HOSTNAME:-train}
    extra_hosts:
      - "${HOSTNAME:-train}:127.0.0.1" # Prevents "unknown host" issue when using `sudo`.
    user: ${UID:-1000}:${GID:-1000}
    environment: # Environment variables for the container, not the build. Equivalent to `--env`
      HISTSIZE: 50000 # Hard-coded large command history size.
    # Setting `HOST_PATH:CONTAINER_PATH`
    # allows the container to access `HOST_PATH` as `CONTAINER_PATH`.
    # See https://docs.docker.com/storage/volumes for details.
    # Current working directory `.` is connected to `PROJECT_ROOT`.
    # Always use the ${HOME} variable to specify the host home directory.
    # See https://github.com/docker/compose/issues/6506 for details.
    volumes: # Equivalent to `-v` flag in `docker run`.
      # Use this if the docker-compose.yaml file is at the project root.
      - .:${PROJECT_ROOT:-/opt/project}
      # Preserve VSCode extensions between containers.
      # Assumes default VSCode server directory.
      - ${HOME}/.vscode-server:/home/${USR:-user}/.vscode-server
    # tmpfs:  # Create directory in RAM for fast data IO.
    #   - /opt/data
    build: # Options for building. Used when `--build` is called in `docker compose`.
      # Set `TARGET_STAGE` to `train-builds` to get just the wheels in `/tmp/dist`.
      target: ${TARGET_STAGE:-train} # Specify build target.
      dockerfile: Dockerfile
      args: # Equivalent to `--build-arg`.
        INTERACTIVE_MODE: ${INTERACTIVE_MODE:-include}
        BUILD_MODE: ${BUILD_MODE:-exclude}
        BUILD_TEST: 1 # Enable tests to have identical configurations with deployment.
        USE_NNPACK: 0
        USE_QNNPACK: 0
        LINUX_DISTRO: ${LINUX_DISTRO:-ubuntu}
        DISTRO_VERSION: ${DISTRO_VERSION:-22.04}
        CUDA_VERSION: ${CUDA_VERSION:-11.8.0}
        CUDNN_VERSION: ${CUDNN_VERSION:-8}
        IMAGE_FLAVOR: ${IMAGE_FLAVOR:-devel}
        PYTHON_VERSION: ${PYTHON_VERSION:-3.10}
        MKL_MODE: ${MKL_MODE:-include} # MKL_MODE can be `include` or `exclude`.
        # Change the `CONDA_URL` for different hardware architectures.
        # URLs from https://github.com/conda-forge/miniforge are recommended over
        # Miniconda URLs from https://docs.conda.io/en/latest/miniconda.html
        # `CONDA_MANAGER` may be either `mamba` (the default) or `conda`.
        # Mamba is a faster reimplementation of conda in C++
        # However, there are occasions where mamba is unable to
        # resolve conflicts that conda can resolve.
        # In such cases, set `CONDA_MANAGER=conda` for conda-based installation.
        # Note that installing Mamba via Mambaforge is strongly recommended.
        CONDA_URL: ${CONDA_URL:-https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh}
        CONDA_MANAGER: ${CONDA_MANAGER:-mamba}
        # Fails if `BUILD_MODE=include` but `CCA` is not set explicitly.
        TORCH_CUDA_ARCH_LIST: ${CCA}
        # Variables for building PyTorch. Must be valid git tags.
        PYTORCH_VERSION_TAG: ${PYTORCH_VERSION_TAG:-v2.0.0}
        TORCHVISION_VERSION_TAG: ${TORCHVISION_VERSION_TAG:-v0.15.1}
        # Variables for downloading PyTorch instead of building.
        PYTORCH_INDEX_URL: ${PYTORCH_INDEX_URL:-https://download.pytorch.org/whl/cu118}
        PYTORCH_VERSION: ${PYTORCH_VERSION:-2.0.0}
        TORCHVISION_VERSION: ${TORCHVISION_VERSION:-0.15.1}
        # URL for faster `apt` and `pip` installs. Optimized for Korean users.
        # Use URLs optimized for user location and security requirements.
        # DEB_OLD: ${DEB_OLD:-http://archive.ubuntu.com}
        # DEB_NEW: ${DEB_NEW:-http://mirror.kakao.com}
        # Comment out the PyPI mirrors to use the default PyPI repository.
        # INDEX_URL: ${INDEX_URL:-http://mirror.kakao.com/pypi/simple}
        # TRUSTED_HOST: ${TRUSTED_HOST:-mirror.kakao.com}

  # This layer may be useful for PyTorch contributors.
  devel: # Skeleton service for development and debugging.
    extends:
      service: base
    hostname: ${HOSTNAME:-devel}
    extra_hosts:
      - "${HOSTNAME:-devel}:127.0.0.1"
    volumes:
      - .:${PROJECT_ROOT:-/opt/project}
    build:
      target: ${TARGET_STAGE:-build-base} # All builds begin at `build-base`.
      dockerfile: Dockerfile

  # Service based on images from the NGC PyTorch image catalog. Visit
  # https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html
  # for an up-to-date list of all NVIDIA NGC PyTorch images.
  # Note that the NGC images are very unstable, with many differences between versions.
  # This service may break for different `NGC_YEAR` and `NGC_MONTH` configurations.
  ngc:
    extends:
      service: base
    user: ${UID:-1000}:${GID:-1000}
    environment:
      HISTSIZE: 50000 # Hard-coded large command history size.
    volumes:
      - .:${PROJECT_ROOT:-/opt/project}
    hostname: ${HOSTNAME:-ngc}
    extra_hosts:
      - "${HOSTNAME:-ngc}:127.0.0.1"
    build:
      target: ${TARGET_STAGE:-train}
      dockerfile: misc/ngc.Dockerfile
      args:
        NGC_YEAR: ${NGC_YEAR:-23}
        NGC_MONTH: ${NGC_MONTH:-03}
        INTERACTIVE_MODE: ${INTERACTIVE_MODE:-include}

  # Service based on the official PyTorch Docker images from Docker Hub. Visit
  # https://hub.docker.com/r/pytorch/pytorch/tags to find available images.
  hub:
    extends:
      service: base
    user: ${UID:-1000}:${GID:-1000}
    environment:
      HISTSIZE: 50000 # Hard-coded large command history size.
    volumes:
      - .:${PROJECT_ROOT:-/opt/project}
    hostname: ${HOSTNAME:-hub}
    extra_hosts:
      - "${HOSTNAME:-hub}:127.0.0.1"
    build:
      target: ${TARGET_STAGE:-train}
      dockerfile: misc/hub.Dockerfile
      args:
        PYTORCH_VERSION: ${PYTORCH_VERSION:-2.0.0}
        # Note that `CUDA_SHORT_VERSION` excludes the patch version numbers.
        CUDA_SHORT_VERSION: ${CUDA_SHORT_VERSION:-11.7}
        CUDNN_VERSION: ${CUDNN_VERSION:-8}
        IMAGE_FLAVOR: ${IMAGE_FLAVOR:-devel}
        INTERACTIVE_MODE: ${INTERACTIVE_MODE:-include}

  # Service installed purely from official/verified Docker images and `conda`.
  simple:
    extends:
      service: base
    user: ${UID:-1000}:${GID:-1000}
    environment:
      HISTSIZE: 50000 # Hard-coded large command history size.
    volumes:
      - .:${PROJECT_ROOT:-/opt/project}
    build:
      target: ${TARGET_STAGE:-train}
      dockerfile: misc/simple.Dockerfile
      args:
        BASE_IMAGE: ${LINUX_DISTRO:-ubuntu}:${DISTRO_VERSION:-22.04}
        INTERACTIVE_MODE: ${INTERACTIVE_MODE:-include}
